name: C++ CI

on:
  push:
    branches: [main] # replace with main (if applicable)
    tags: ['*']
  pull_request:
    branches: [main] # replace with main (if applicable)

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        # Use a bash shell, so we can use the same syntax for environment variable
        # access regardless of the host operating system
        # https://github.com/saxbophone/CPP20-Cross-Platform-Template
        shell: bash
    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      SFML_VERSION: "2021-11-18"
      BUILD_TYPE: Debug
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            c: clang-11
            cxx: clang++-11
            name: Ubuntu 20.04 Clang 11
            cmake_flags: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_SHARED_LIBS=FALSE
          - os: ubuntu-20.04
            c: clang-12
            cxx: clang++-12
            name: Ubuntu 20.04 Clang 12
            cmake_flags: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_SHARED_LIBS=FALSE
          - os: ubuntu-20.04
            c: gcc-10
            cxx: g++-10
            name: Ubuntu 20.04 GCC 10
            cmake_flags: -DBUILD_SHARED_LIBS=FALSE
          - os: macos-11
            c: clang
            cxx: clang++
            name: macOS 11 Apple Clang 13
            cmake_flags: -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE
          # - os: macos-11
          #   c: gcc-11
          #   cxx: g++-11
          #   name: macOS 11 GCC 11
          #   cmake_flags: -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE
          - os: windows-2022
            c: cl
            cxx: cl
            name: Windows 2022 MSVC 19.30
            cmake_flags: -DBUILD_SHARED_LIBS=TRUE
          - os: windows-2022
            c: gcc
            cxx: g++
            name: Windows 2022 GCC 10
            cmake_flags: -DBUILD_SHARED_LIBS=TRUE
            cmake_generator: Ninja
            # other generator: "\"MinGW Makefiles\""

    steps:
      - uses: actions/checkout@v2

      - name: Prepare env
        run: |
          echo $GITHUB_WORKSPACE
          # mkdir $GITHUB_WORKSPACE/build
          mkdir $GITHUB_WORKSPACE/artifacts

      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        # adapted from SFML GitHub Actions
        run: |
          sudo apt-get update
          sudo apt-get install \
            libxrandr-dev \
            libxcursor-dev \
            libudev-dev \
            libopenal-dev \
            libflac-dev \
            libvorbis-dev \
            libgl1-mesa-dev \
            libegl1-mesa-dev \
            xorg \
            openbox \
            xdotool 
        # wmctrl

      - name: Install clang-tidy and libc++ (Linux Clang 12)
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        run: |
          sudo apt-get update
          sudo apt-get install clang-tidy libc++-12-dev libc++abi-12-dev \
            libxkbcommon-x11-0 \
            libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

      - name: Install ninja libc++ (Linux Clang 11)
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build libc++-11-dev libc++abi-11-dev

      - name: Install valgrind
        if: runner.os == 'Linux' && matrix.cxx == 'g++-10'
        run: |
          sudo apt-get update
          sudo apt-get install valgrind \
            libxkbcommon-x11-0 \
            libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

#      - name: Install X11 dependencies on MacOS
#        if: runner.os == 'macOS'
#        run: |
#          brew update
#          brew cleanup
#          # brew upgrade
#          brew cleanup
#          brew install xquartz
#          brew install xdotool

      - name: Cache tools
        uses: actions/cache@v2
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        id: cache-tools
        with:
          path: tools
          key: tools-cppcheck-sanitizers

      - name: Build tools
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          mkdir tools/
          wget https://github.com/danmar/cppcheck/archive/2.6.zip
          unzip 2.6.zip
          rm 2.6.zip
          mv cppcheck-2.6 tools/cppcheck-2.6
          cd tools/cppcheck-2.6
          mkdir build
          cmake -S . -B build
          cmake --build build -j6

      - name: Install tools
        # this step is fast, no need for caching
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        # build/install other tools in these steps
        run: |
          cd tools/cppcheck-2.6
          sudo cmake --install build

      - name: Cache deps
        uses: actions/cache@v2
        id: cache-deps
        # make this cache dependent on cmake generator
        with:
          path: |
            build/_deps
          key: cache-1-${{ env.BUILD_TYPE }}-${{ matrix.os }}-${{ matrix.cxx }}-${{ env.SFML_VERSION }}

      - name: Cache deps (MinGW Ninja)
        uses: actions/cache@v2
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        id: cache-deps-ninja
        # make this cache dependent on cmake generator
        with:
          path: |
            build/.ninja_deps
            build/.ninja_log
          key: ${{ matrix.os }}-${{ matrix.cxx }}-ninja-cache

      - name: Cache MinGW
        uses: actions/cache@v2
        id: cache-mingw
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        with:
          path: gcc
          key: ${{ runner.os }}-gcc-10

      - name: Download toolchain (MinGW)
        uses: suisei-cn/actions-download-file@v1
        id: downloadgcc
        if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
        with:
          url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/10.3.0-12.0.0-9.0.0-r2/winlibs-x86_64-posix-seh-gcc-10.3.0-mingw-w64-9.0.0-r2.7z"
          target: compiler

      - name: Install toolchain (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
        run: |
          7z x compiler/winlibs-x86_64-posix-seh-gcc-10.3.0-mingw-w64-9.0.0-r2.7z -ogcc

      - name: Configure CMake (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        run: |
          PATH="$(pwd)/gcc/mingw64/bin:$PATH"
          CMAKE_GENERATOR=${{ matrix.cmake_generator }} cmake -S $GITHUB_WORKSPACE -B build \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            ${{matrix.cmake_flags}}

      - name: Configure CMake
        run: |
          CMAKE_GENERATOR=${{ matrix.cmake_generator }} cmake -S $GITHUB_WORKSPACE -B build \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            ${{matrix.cmake_flags}}

      - name: Build
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build build --config $BUILD_TYPE -j6

      - name: Install
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: cmake --install build --config $BUILD_TYPE --prefix artifacts

      - name: Copy stdlib (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        run: |
          cp gcc/mingw64/bin/libstdc++-6.dll $GITHUB_WORKSPACE/artifacts
          cp gcc/mingw64/bin/libgcc_s_seh-1.dll $GITHUB_WORKSPACE/artifacts

      - name: Cppcheck
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        run: cppcheck --enable=all --project=build/compile_commands.json -ibuild --suppress=useStlAlgorithm --suppress='*:build/*' --suppress='*:ext/*' --suppress=missingIncludeSystem --suppress=unmatchedSuppression --error-exitcode=1

      - name: Clang-tidy
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        # config from https://gist.github.com/jfm535/7581ccadbd539303d8bed2f46f973108
        run: |
          sed -i "s|$(which clang++-12)|$(realpath $(which clang++-12))|g" build/compile_commands.json

          cat build/compile_commands.json |
            jq -r '.[] | .file' |           # select source file paths from CMake project; -r to strip quotes
            grep -v "/build/_deps/" |       # ignore external dependencies
            xargs clang-tidy -p build

      - name: Setup memory sanitizer
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11' && steps.cache-tools.outputs.cache-hit != 'true'
        run: |
          cd tools
          git clone --depth=1 https://github.com/llvm/llvm-project
          cd llvm-project
          mkdir build; cd build
          sudo ln -s -f /usr/bin/clang-11 /usr/bin/clang
          sudo ln -s -f /usr/bin/clang++-11 /usr/bin/clang++
          CC=clang-11 CXX=clang++-11 cmake -GNinja ../llvm \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_PROJECTS="libcxx;libcxxabi" \
            -DCMAKE_C_COMPILER=clang \
            -DCMAKE_CXX_COMPILER=clang++ \
            -DLLVM_USE_SANITIZER=MemoryWithOrigins \
            -DCMAKE_BUILD_WITH_INSTALL_RPATH=true
          cmake --build . -j6 -- cxx cxxabi


# Running a (headless) GUI app - postponed for now
#
# https://github.com/GabrielBB/xvfb-action
# https://github.com/Laguna1989/JamTemplateCpp/blob/master/.github/workflows/test_verification.yml
# https://github.com/mviereck/x11docker

      - name: Make scripts executable
        if: runner.os == 'Linux'
        run: |
          chmod +x scripts/run.sh
          chmod +x scripts/run_valgrind.sh

      # too many memory errors in external libs
      # - name: Test 1
      #   uses: GabrielBB/xvfb-action@v1
      #   if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
      #   env:
      #      MSAN_OPTIONS: halt_on_error=0
      #      DISPLAY: :99.0
      #   with:
      #     run: |
      #       ./run.sh
      #     working-directory: ${{github.workspace}}

      - name: Test 2
        uses: GabrielBB/xvfb-action@v1
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-12'
        env:
           ASAN_OPTIONS: halt_on_error=0
           DISPLAY: :99.0
        with:
          run: |
            ./scripts/run.sh
          working-directory: ${{github.workspace}}

      - name: Test 3
        continue-on-error: true
        uses: GabrielBB/xvfb-action@v1
        if: runner.os == 'Linux' && matrix.cxx == 'g++-10'
        env:
          DISPLAY: :99.0
        with:
          run: |
            ./scripts/run_valgrind.sh
          working-directory: ${{github.workspace}}

#      - name: Sanitizers
#        # run one sanitizer for each OS to avoid extra binaries;
#        # memory on Linux clang, address on macOS clang
#        # if: runner.os != 'Windows'
#        if: runner.os == 'macOS' # || runner.os == 'Linux' && matrix.cxx == 'clang++-11'
#        # if: matrix.cxx == 'clang++-11'
#        # NOTE: update executable name if it is changed in CMakeLists.txt
#        env:
#          DISPLAY: :99.0
#          ASAN_OPTIONS=detect_leaks=1
#        run: |
#          cat date.txt | ./artifacts/bin/demo-sfml &
#          xdotool search --name "My Window" windowactivate --sync %1 key Alt+F4

#      - name: Valgrind
#        if: runner.os == 'Linux' && matrix.cxx == 'g++-10'
#        # NOTE: update executable name if it is changed in CMakeLists.txt
#        env:
#          DISPLAY: :99.0
#        run: |
#          # without --show-leak-kinds=all --track-origins=yes since there might be many leaks in external libs
#          valgrind --leak-check=full --error-exitcode=1 cat date.txt | ./artifacts/bin/demo-sfml &
#          xdotool search --name "My Window" windowactivate --sync %1 key Alt+F4
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
            name: ${{ env.BUILD_TYPE }}_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}
            path: artifacts
            retention-days: 10

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> $GITHUB_ENV

      - name: Copy missing dlls
        if: runner.os == 'Windows' && matrix.cxx == 'cl'
        run: |
          cp $(where ucrtbased.dll) artifacts/bin/
          cp $(where VCRUNTIME140_1D.dll) artifacts/bin/
          cp $(where MSVCP140D.dll) artifacts/bin/
          cp $(where VCRUNTIME140D.dll) artifacts/bin/

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: artifacts
          filename: release_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
